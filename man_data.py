

indices = {
	'A': [[62, 41, 24, 9, 2, 14, 40, 34, 50, 60], [51, 37, 24, 31, 27, 46, 54, 9, 1, 12], [62, 56, 48, 20, 8, 1, 11, 19, 27, 51, 66, 38], [], [52, 38, 18, 8, 1, 9, 24, 43, 53, 56, 30], [56, 48, 21, 11, 2, 14, 39, 53, 58, 42], [51, 43, 21, 9, 0, 12, 22, 48, 56, 35, 30], [43, 26, 19, 11, 2, 10, 25, 42, 45, 30, 24, 24], [62, 40, 31, 19, 7, 3, 16, 30, 55, 65, 48, 42], [48, 40, 20, 10, 0, 9, 19, 37, 45, 52, 36, 31], [44, 34, 17, 7, 0, 12, 24, 41, 46, 49, 30, 27], [63, 53, 27, 9, 2, 14, 29, 48, 64, 34, 40]],
  'B': [[74, 69, 61, 51, 43, 32, 34, 23, 17, 11, 4, 20, 54, 67], [73, 60, 33, 49, 41, 55, 69, 81, 23, 16, 8, 14, 30, 42, 49], [90, 93, 80, 65, 55, 46, 32, 21, 8, 18, 41, 74], [67, 50, 29, 14, 7, 3, 9, 22, 32, 42, 49, 69], [57, 73, 58, 50, 42, 21, 15, 9, 2, 8, 20, 45], [61, 48, 22, 8, 1, 9, 25, 33, 38, 49, 67, 73, 65], [67, 64, 54, 46, 42, 34, 25, 24, 13, 2, 4, 12, 22, 49, 31], [42, 60, 73, 64, 54, 48, 39, 31, 18, 9, 3, 10, 17], [78, 87, 67, 55, 48, 43, 47, 37, 18, 15, 5, 0, 36, 60], [70, 59, 41, 21, 12, 2, 13, 22, 37, 35, 47, 56, 68, 80, 78], [69, 59, 51, 26, 15, 4, 17, 27, 39, 47, 60, 70, 74], [90, 89, 70, 56, 35, 41, 23, 11, 3, 18, 36, 69, 86]]
}

edges = {
	'A': [[[0, 1], [1, 2], [2, 7], [7, 6], [6, 8], [8, 9], [5, 6], [4, 5], [3, 4], [2, 3]], [[0, 1], [1, 2], [9, 2], [9, 8], [7, 8], [4, 7], [5, 4], [6, 5], [3, 4], [2, 3]], [[1, 0], [2, 1], [2, 3], [3, 4], [5, 4], [5, 6], [6, 7], [7, 8], [9, 8], [9, 10], [11, 8], [11, 2]], [], [[0, 1], [2, 1], [3, 2], [3, 4], [5, 4], [5, 6], [10, 6], [10, 2], [7, 6], [7, 8], [9, 8]], [[1, 0], [1, 2], [3, 2], [4, 3], [5, 4], [6, 5], [7, 6], [7, 8], [9, 6], [2, 9]], [[0, 1], [2, 1], [3, 2], [4, 3], [5, 4], [6, 5], [6, 7], [7, 8], [9, 6], [10, 9], [2, 10]], [[1, 0], [2, 1], [2, 3], [3, 4], [5, 4], [6, 5], [7, 6], [9, 6], [9, 10], [2, 10]], [[0, 1], [2, 1], [3, 2], [4, 3], [4, 5], [6, 5], [6, 7], [7, 8], [9, 8], [10, 7], [11, 10], [11, 2]], [[0, 1], [2, 1], [2, 3], [4, 3], [5, 4], [5, 6], [6, 7], [8, 7], [9, 8], [10, 6], [11, 10], [11, 2]], [[1, 0], [1, 2], [3, 2], [4, 3], [4, 5], [5, 6], [7, 6], [8, 7], [10, 6], [11, 10], [11, 2]], [[1, 0], [1, 10], [2, 3], [4, 3], [5, 4], [5, 6], [7, 6], [7, 8], [9, 6], [9, 10], [2, 10]]],
	'B': [[[0, 13], [0, 1], [1, 2], [2, 3], [4, 3], [5, 4], [5, 7], [7, 8], [9, 8], [9, 10], [11, 10], [11, 6], [6, 5], [12, 6], [13, 12]], [[1, 0], [2, 1], [8, 2], [9, 8], [10, 9], [10, 11], [11, 12], [4, 13], [3, 14], [3, 14], [13, 5], [6, 5], [6, 7], [0, 7]], [[11, 10], [9, 10], [8, 9], [8, 7], [6, 7], [4, 6], [3, 4], [3, 2], [1, 2], [0, 1], [5, 10]], [[0, 1], [11, 0], [11, 10], [9, 10], [9, 8], [2, 8], [8, 7], [7, 6], [6, 5], [5, 4], [3, 4], [3, 2], [1, 2], [0, 1]], [[11, 0], [1, 0], [2, 1], [2, 3], [4, 3], [4, 5], [5, 10], [6, 5], [7, 6], [7, 8], [9, 8], [9, 10], [11, 10], [0, 11]], [[0, 12], [1, 2], [3, 2], [4, 3], [5, 4], [5, 6], [7, 6], [7, 2], [6, 8], [8, 9], [10, 9], [11, 10], [12, 11], [0, 12]], [[0, 13], [12, 13], [11, 12], [10, 11], [10, 9], [9, 8], [6, 7], [7, 14], [14, 12], [5, 6], [5, 4], [4, 3], [2, 3], [2, 1], [0, 1]], [[1, 0], [12, 0], [11, 12], [11, 10], [10, 9], [8, 9], [6, 8], [7, 6], [5, 6], [4, 5], [3, 4], [2, 3], [2, 1], [7, 0]], [[13, 0], [12, 13], [11, 12], [11, 10], [10, 9], [8, 9], [8, 7], [4, 5], [6, 5], [3, 4], [3, 2], [2, 3], [0, 1]], [[14, 0], [13, 14], [11, 12], [10, 11], [8, 10], [8, 9], [2, 9], [7, 8], [6, 7], [5, 6], [4, 5], [3, 4], [2, 3], [1, 2], [0, 1], [14, 0]], [[0, 1], [2, 1], [3, 2], [4, 3], [4, 5], [5, 6], [6, 7], [8, 7], [8, 2], [9, 7], [11, 10], [12, 0], [12, 0], [0, 1], [1, 2]], [[11, 10], [9, 10], [8, 9], [8, 7], [7, 6], [6, 4], [5, 4], [5, 10], [2, 3], [0, 12], [0, 12]]]
}

def mark_edges(letter = 'A', I = 1, J = 2, indices = []):

	f, ax = plt.subplots(I,J)

	edges = []
	kd_trees = []

	def on_click(event):
		i, j = np.where(ax == event.inaxes)
		idx = i[0] * J + j[0]

		if event.button == 1:
			kd_tree = kd_trees[idx]
			_, edge = kd_tree.query([event.xdata, event.ydata], 2)
			edges[idx].append(list(edge))
		else:
			print(edges)

	f.canvas.mpl_connect('button_press_event', on_click)

	for i in range(I):
		for j in range(J):
			idx = i * J + j
			pl = ax[i][j]
			vertices = get_image(letter, idx, size = 30)[0]
			edges.append([])
			pl.scatter(vertices[:,0], vertices[:,1], marker = '.')

			marked = np.array(indices[letter][idx])
			if marked.size == 0: 
				kd_trees.append(0)
				continue
			
			sparse = vertices[marked,:]
			kd_trees.append(spatial.KDTree(sparse))
			pl.scatter(sparse[:,0], sparse[:,1], marker = '+')

	plt.show()


def mark_vertices(letter = 'A', I = 1, J = 2):

	f, ax = plt.subplots(I,J)

	indices = []
	kd_trees = []

	def on_click(event):
		i, j = np.where(ax == event.inaxes)
		idx = i[0] * J + j[0]

		if event.button == 1:
			kd_tree = kd_trees[idx]
			_, marked = kd_tree.query([event.xdata, event.ydata], 1)
			indices[idx].append(marked)
		else:
			print(indices)

	f.canvas.mpl_connect('button_press_event', on_click)

	for i in range(I):
		for j in range(J):
			idx = i * J + j
			pl = ax[i][j]
			vertices = get_image(letter, idx, size = 30)[0]

			kd_trees.append(spatial.KDTree(vertices))
			indices.append([])
			pl.scatter(vertices[:,0], vertices[:,1], marker = '.')

	plt.show()


def show_edges(letter = 'A', I = 1, J = 2, indices = [], edges = []):

	f, ax = plt.subplots(I,J)

	for i in range(I):
		for j in range(J):
			idx = i * J + j
			pl = ax[i][j]
			vertices = get_image(letter, idx, size = 30)[0]
			# pl.scatter(vertices[:,0], vertices[:,1], marker = '.')

			marked = np.array(indices[letter][idx])
			if marked.size == 0: continue
			sparse = vertices[marked,:]
			pl.scatter(sparse[:,0], sparse[:,1], marker = '+')

			try:
				drawn = np.array(edges[letter][idx])
			except:
				continue
			print(indices[letter][idx])
			print(edges[letter][idx])

			if drawn.size == 0: continue
			for edge in drawn:
				pl.plot(sparse[edge, 0], sparse[edge, 1], lw = 1, c = 'gray')



	plt.show()