
data = {
	"O": {"vertices": [[-0.16733870967741926, 0.6298701298701299], [-0.2056451612903225, 0.5784632034632036], [-0.25604838709677424, 0.5108225108225108], [-0.29032258064516125, 0.4675324675324677], [-0.314516129032258, 0.42965367965367984], [-0.3407258064516129, 0.3836580086580088], [-0.375, 0.3106060606060608], [-0.409274193548387, 0.2186147186147187], [-0.43145161290322576, 0.12121212121212133], [-0.439516129032258, 0.023809523809523947], [-0.4415322580645161, -0.07088744588744578], [-0.42741935483870963, -0.17099567099567103], [-0.3729838709677419, -0.2954545454545454], [-0.3125, -0.400974025974026], [-0.2318548387096775, -0.5064935064935066], [-0.15322580645161277, -0.58495670995671], [-0.06653225806451601, -0.6444805194805195], [0.006048387096774244, -0.6823593073593074], [0.0766129032258065, -0.7012987012987013], [0.127016129032258, -0.6958874458874459], [0.16733870967741948, -0.6634199134199135], [0.2016129032258065, -0.612012987012987], [0.22782258064516125, -0.547077922077922], [0.252016129032258, -0.46590909090909094], [0.28629032258064524, -0.3576839826839827], [0.314516129032258, -0.24945887445887438], [0.3286290322580645, -0.14935064935064934], [0.3306451612903225, -0.07629870129870131], [0.3306451612903225, -0.01948051948051943], [0.31854838709677424, 0.045454545454545414], [0.2943548387096775, 0.13474025974025983], [0.27419354838709675, 0.19696969696969702], [0.252016129032258, 0.2537878787878789], [0.22782258064516125, 0.30519480519480524], [0.2036290322580645, 0.3511904761904763], [0.18346774193548399, 0.3890692640692641], [0.157258064516129, 0.42153679653679665], [0.13508064516129026, 0.4540043290043292], [0.11693548387096775, 0.4810606060606062], [0.10080645161290325, 0.49729437229437234], [0.08669354838709675, 0.5108225108225108], [0.07459677419354849, 0.5243506493506496], [0.06653225806451624, 0.5405844155844157], [0.06048387096774199, 0.5514069264069266]], "edges": [[0, 1], [0, 43], [1, 2], [2, 3], [3, 4], [4, 5], [5, 6], [6, 7], [7, 8], [8, 9], [9, 10], [10, 11], [11, 12], [12, 13], [13, 14], [14, 15], [15, 16], [16, 17], [17, 18], [18, 19], [19, 20], [20, 21], [21, 22], [22, 23], [23, 24], [24, 25], [25, 26], [26, 27], [27, 28], [28, 29], [29, 30], [30, 31], [31, 32], [32, 33], [33, 34], [34, 35], [35, 36], [36, 37], [37, 38], [38, 39], [39, 40], [40, 41], [41, 42], [42, 43]]},
	"D": {"vertices": [[-0.377016129032258, -0.6525974025974026], [-0.377016129032258, -0.6363636363636364], [-0.377016129032258, -0.612012987012987], [-0.3790322580645161, -0.5903679653679654], [-0.38104838709677413, -0.5741341991341992], [-0.38306451612903225, -0.5579004329004329], [-0.38508064516129026, -0.5335497835497836], [-0.38508064516129026, -0.5064935064935066], [-0.3870967741935484, -0.474025974025974], [-0.3891129032258064, -0.42261904761904756], [-0.3911290322580645, -0.3576839826839827], [-0.3911290322580645, -0.2954545454545454], [-0.3891129032258064, -0.23322510822510822], [-0.3891129032258064, -0.15746753246753253], [-0.3931451612903225, -0.08441558441558428], [-0.3951612903225806, -0.0005411255411253979], [-0.3951612903225806, 0.08603896103896114], [-0.3951612903225806, 0.18073593073593086], [-0.39717741935483863, 0.2591991341991342], [-0.40120967741935476, 0.3079004329004329], [-0.4052419354838709, 0.3620129870129871], [-0.41129032258064513, 0.41612554112554134], [-0.41330645161290314, 0.4512987012987013], [-0.4193548387096774, 0.472943722943723], [-0.4233870967741935, 0.4810606060606062], [-0.4254032258064516, 0.4864718614718615], [-0.42741935483870963, 0.4891774891774894], [-0.42741935483870963, 0.49729437229437234], [-0.42943548387096775, 0.5027056277056279], [-0.43145161290322576, 0.5054112554112555], [-0.43145161290322576, 0.5108225108225108], [-0.42943548387096775, 0.5108225108225108], [-0.41129032258064513, 0.5108225108225108], [-0.3891129032258064, 0.5135281385281387], [-0.3629032258064516, 0.5135281385281387], [-0.3266129032258064, 0.5108225108225108], [-0.27822580645161277, 0.5108225108225108], [-0.22983870967741926, 0.5027056277056279], [-0.17741935483870974, 0.49188311688311703], [-0.11491935483870974, 0.4810606060606062], [-0.0625, 0.46212121212121215], [-0.022177419354838745, 0.4404761904761907], [0.010080645161290258, 0.4053030303030305], [0.06451612903225801, 0.34577922077922096], [0.1391129032258065, 0.2321428571428572], [0.21169354838709675, 0.11850649350649367], [0.247983870967742, 0.045454545454545414], [0.27217741935483875, -0.03300865800865793], [0.284274193548387, -0.097943722943723], [0.28830645161290325, -0.15476190476190466], [0.28830645161290325, -0.20887445887445888], [0.2681451612903225, -0.28733766233766234], [0.24395161290322576, -0.3387445887445887], [0.219758064516129, -0.3847402597402597], [0.1995967741935485, -0.42261904761904756], [0.18145161290322576, -0.4496753246753247], [0.16129032258064524, -0.474025974025974], [0.12903225806451624, -0.5173160173160173], [0.10080645161290325, -0.5524891774891775], [0.0766129032258065, -0.5741341991341992], [0.0463709677419355, -0.5984848484848485], [0.02016129032258074, -0.6228354978354979], [-0.008064516129032251, -0.6417748917748918], [-0.03629032258064524, -0.658008658008658], [-0.06048387096774199, -0.6715367965367965], [-0.09072580645161277, -0.6877705627705628], [-0.11693548387096775, -0.6985930735930737], [-0.14516129032258052, -0.7148268398268398], [-0.16733870967741926, -0.7256493506493507], [-0.189516129032258, -0.7310606060606061], [-0.21169354838709675, -0.7364718614718615], [-0.2338709677419355, -0.7364718614718615], [-0.252016129032258, -0.7391774891774892], [-0.26008064516129026, -0.7391774891774892], [-0.26209677419354827, -0.7364718614718615], [-0.26209677419354827, -0.7283549783549784]], "edges": [[0, 1], [0, 75], [1, 2], [2, 3], [3, 4], [4, 5], [5, 6], [6, 7], [7, 8], [8, 9], [9, 10], [10, 11], [11, 12], [12, 13], [13, 14], [14, 15], [15, 16], [16, 17], [17, 18], [18, 19], [19, 20], [20, 21], [21, 22], [22, 23], [23, 24], [24, 25], [25, 26], [26, 27], [27, 28], [28, 29], [29, 30], [30, 31], [31, 32], [32, 33], [33, 34], [34, 35], [35, 36], [36, 37], [37, 38], [38, 39], [39, 40], [40, 41], [41, 42], [42, 43], [43, 44], [44, 45], [45, 46], [46, 47], [47, 48], [48, 49], [49, 50], [50, 51], [51, 52], [52, 53], [53, 54], [54, 55], [55, 56], [56, 57], [57, 58], [58, 59], [59, 60], [60, 61], [61, 62], [62, 63], [63, 64], [64, 65], [65, 66], [66, 67], [67, 68], [68, 69], [69, 70], [70, 71], [71, 72], [72, 73], [73, 74], [74, 75]]}
}



indices = {
	'A': [[62, 41, 24, 9, 2, 14, 40, 34, 50, 60], [51, 37, 24, 31, 27, 46, 54, 9, 1, 12], [62, 56, 48, 20, 8, 1, 11, 19, 27, 51, 66, 38], [], [52, 38, 18, 8, 1, 9, 24, 43, 53, 56, 30], [56, 48, 21, 11, 2, 14, 39, 53, 58, 42], [51, 43, 21, 9, 0, 12, 22, 48, 56, 35, 30], [43, 26, 19, 11, 2, 10, 25, 42, 45, 30, 24, 24], [62, 40, 31, 19, 7, 3, 16, 30, 55, 65, 48, 42], [48, 40, 20, 10, 0, 9, 19, 37, 45, 52, 36, 31], [44, 34, 17, 7, 0, 12, 24, 41, 46, 49, 30, 27], [63, 53, 27, 9, 2, 14, 29, 48, 64, 34, 40]],
  'B': [[74, 69, 61, 51, 43, 32, 34, 23, 17, 11, 4, 20, 54, 67], [73, 60, 33, 49, 41, 55, 69, 81, 23, 16, 8, 14, 30, 42, 49], [90, 93, 80, 65, 55, 46, 32, 21, 8, 18, 41, 74], [67, 50, 29, 14, 7, 3, 9, 22, 32, 42, 49, 69], [57, 73, 58, 50, 42, 21, 15, 9, 2, 8, 20, 45], [61, 48, 22, 8, 1, 9, 25, 33, 38, 49, 67, 73, 65], [67, 64, 54, 46, 42, 34, 25, 24, 13, 2, 4, 12, 22, 49, 31], [42, 60, 73, 64, 54, 48, 39, 31, 18, 9, 3, 10, 17], [78, 87, 67, 55, 48, 43, 47, 37, 18, 15, 5, 0, 36, 60], [70, 59, 41, 21, 12, 2, 13, 22, 37, 35, 47, 56, 68, 80, 78], [69, 59, 51, 26, 15, 4, 17, 27, 39, 47, 60, 70, 74], [90, 89, 70, 56, 35, 41, 23, 11, 3, 18, 36, 69, 86]]
}

edges = {
	'A': [[[0, 1], [1, 2], [2, 7], [7, 6], [6, 8], [8, 9], [5, 6], [4, 5], [3, 4], [2, 3]], [[0, 1], [1, 2], [9, 2], [9, 8], [7, 8], [4, 7], [5, 4], [6, 5], [3, 4], [2, 3]], [[1, 0], [2, 1], [2, 3], [3, 4], [5, 4], [5, 6], [6, 7], [7, 8], [9, 8], [9, 10], [11, 8], [11, 2]], [], [[0, 1], [2, 1], [3, 2], [3, 4], [5, 4], [5, 6], [10, 6], [10, 2], [7, 6], [7, 8], [9, 8]], [[1, 0], [1, 2], [3, 2], [4, 3], [5, 4], [6, 5], [7, 6], [7, 8], [9, 6], [2, 9]], [[0, 1], [2, 1], [3, 2], [4, 3], [5, 4], [6, 5], [6, 7], [7, 8], [9, 6], [10, 9], [2, 10]], [[1, 0], [2, 1], [2, 3], [3, 4], [5, 4], [6, 5], [7, 6], [9, 6], [9, 10], [2, 10]], [[0, 1], [2, 1], [3, 2], [4, 3], [4, 5], [6, 5], [6, 7], [7, 8], [9, 8], [10, 7], [11, 10], [11, 2]], [[0, 1], [2, 1], [2, 3], [4, 3], [5, 4], [5, 6], [6, 7], [8, 7], [9, 8], [10, 6], [11, 10], [11, 2]], [[1, 0], [1, 2], [3, 2], [4, 3], [4, 5], [5, 6], [7, 6], [8, 7], [10, 6], [11, 10], [11, 2]], [[1, 0], [1, 10], [2, 3], [4, 3], [5, 4], [5, 6], [7, 6], [7, 8], [9, 6], [9, 10], [2, 10]]],
	'B': [[[0, 13], [0, 1], [1, 2], [2, 3], [4, 3], [5, 4], [5, 7], [7, 8], [9, 8], [9, 10], [11, 10], [11, 6], [6, 5], [12, 6], [13, 12]], [[1, 0], [2, 1], [8, 2], [9, 8], [10, 9], [10, 11], [11, 12], [4, 13], [3, 14], [3, 14], [13, 5], [6, 5], [6, 7], [0, 7]], [[11, 10], [9, 10], [8, 9], [8, 7], [6, 7], [4, 6], [3, 4], [3, 2], [1, 2], [0, 1], [5, 10]], [[0, 1], [11, 0], [11, 10], [9, 10], [9, 8], [2, 8], [8, 7], [7, 6], [6, 5], [5, 4], [3, 4], [3, 2], [1, 2], [0, 1]], [[11, 0], [1, 0], [2, 1], [2, 3], [4, 3], [4, 5], [5, 10], [6, 5], [7, 6], [7, 8], [9, 8], [9, 10], [11, 10], [0, 11]], [[0, 12], [1, 2], [3, 2], [4, 3], [5, 4], [5, 6], [7, 6], [7, 2], [6, 8], [8, 9], [10, 9], [11, 10], [12, 11], [0, 12]], [[0, 13], [12, 13], [11, 12], [10, 11], [10, 9], [9, 8], [6, 7], [7, 14], [14, 12], [5, 6], [5, 4], [4, 3], [2, 3], [2, 1], [0, 1]], [[1, 0], [12, 0], [11, 12], [11, 10], [10, 9], [8, 9], [6, 8], [7, 6], [5, 6], [4, 5], [3, 4], [2, 3], [2, 1], [7, 0]], [[13, 0], [12, 13], [11, 12], [11, 10], [10, 9], [8, 9], [8, 7], [4, 5], [6, 5], [3, 4], [3, 2], [2, 3], [0, 1]], [[14, 0], [13, 14], [11, 12], [10, 11], [8, 10], [8, 9], [2, 9], [7, 8], [6, 7], [5, 6], [4, 5], [3, 4], [2, 3], [1, 2], [0, 1], [14, 0]], [[0, 1], [2, 1], [3, 2], [4, 3], [4, 5], [5, 6], [6, 7], [8, 7], [8, 2], [9, 7], [11, 10], [12, 0], [12, 0], [0, 1], [1, 2]], [[11, 10], [9, 10], [8, 9], [8, 7], [7, 6], [6, 4], [5, 4], [5, 10], [2, 3], [0, 12], [0, 12]]]
}

def mark_edges(letter = 'A', I = 1, J = 2, indices = []):

	f, ax = plt.subplots(I,J)

	edges = []
	kd_trees = []

	def on_click(event):
		i, j = np.where(ax == event.inaxes)
		idx = i[0] * J + j[0]

		if event.button == 1:
			kd_tree = kd_trees[idx]
			_, edge = kd_tree.query([event.xdata, event.ydata], 2)
			edges[idx].append(list(edge))
		else:
			print(edges)

	f.canvas.mpl_connect('button_press_event', on_click)

	for i in range(I):
		for j in range(J):
			idx = i * J + j
			pl = ax[i][j]
			vertices = get_image(letter, idx, size = 30)[0]
			edges.append([])
			pl.scatter(vertices[:,0], vertices[:,1], marker = '.')

			marked = np.array(indices[letter][idx])
			if marked.size == 0: 
				kd_trees.append(0)
				continue
			
			sparse = vertices[marked,:]
			kd_trees.append(spatial.KDTree(sparse))
			pl.scatter(sparse[:,0], sparse[:,1], marker = '+')

	plt.show()


def mark_vertices(letter = 'A', I = 1, J = 2):

	f, ax = plt.subplots(I,J)

	indices = []
	kd_trees = []

	def on_click(event):
		i, j = np.where(ax == event.inaxes)
		idx = i[0] * J + j[0]

		if event.button == 1:
			kd_tree = kd_trees[idx]
			_, marked = kd_tree.query([event.xdata, event.ydata], 1)
			indices[idx].append(marked)
		else:
			print(indices)

	f.canvas.mpl_connect('button_press_event', on_click)

	for i in range(I):
		for j in range(J):
			idx = i * J + j
			pl = ax[i][j]
			vertices = get_image(letter, idx, size = 30)[0]

			kd_trees.append(spatial.KDTree(vertices))
			indices.append([])
			pl.scatter(vertices[:,0], vertices[:,1], marker = '.')

	plt.show()


def show_edges(letter = 'A', I = 1, J = 2, indices = [], edges = []):

	f, ax = plt.subplots(I,J)

	for i in range(I):
		for j in range(J):
			idx = i * J + j
			pl = ax[i][j]
			vertices = get_image(letter, idx, size = 30)[0]
			# pl.scatter(vertices[:,0], vertices[:,1], marker = '.')

			marked = np.array(indices[letter][idx])
			if marked.size == 0: continue
			sparse = vertices[marked,:]
			pl.scatter(sparse[:,0], sparse[:,1], marker = '+')

			try:
				drawn = np.array(edges[letter][idx])
			except:
				continue
			print(indices[letter][idx])
			print(edges[letter][idx])

			if drawn.size == 0: continue
			for edge in drawn:
				pl.plot(sparse[edge, 0], sparse[edge, 1], lw = 1, c = 'gray')



	plt.show()